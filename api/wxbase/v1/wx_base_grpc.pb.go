// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: wxbase/v1/wx_base.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OfficialAccount_WxCallback_FullMethodName             = "/helloworld.v1.OfficialAccount/WxCallback"
	OfficialAccount_AddOfficialAccount_FullMethodName     = "/helloworld.v1.OfficialAccount/AddOfficialAccount"
	OfficialAccount_UpdateOfficialAccount_FullMethodName  = "/helloworld.v1.OfficialAccount/UpdateOfficialAccount"
	OfficialAccount_DeleteOfficialAccount_FullMethodName  = "/helloworld.v1.OfficialAccount/DeleteOfficialAccount"
	OfficialAccount_GetOfficialAccountList_FullMethodName = "/helloworld.v1.OfficialAccount/GetOfficialAccountList"
)

// OfficialAccountClient is the client API for OfficialAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OfficialAccountClient interface {
	// 微信回调
	WxCallback(ctx context.Context, in *WxCallbackRequest, opts ...grpc.CallOption) (*WxCallbackReply, error)
	// ------------ internal ----------
	// 添加公众号
	AddOfficialAccount(ctx context.Context, in *AddOfficialAccountRequest, opts ...grpc.CallOption) (*AddOfficialAccountReply, error)
	// 修改公众号
	UpdateOfficialAccount(ctx context.Context, in *UpdateOfficialAccountRequest, opts ...grpc.CallOption) (*UpdateOfficialAccountReply, error)
	// 删除公众号
	DeleteOfficialAccount(ctx context.Context, in *DeleteOfficialAccountRequest, opts ...grpc.CallOption) (*DeleteOfficialAccountReply, error)
	// 获取公众号列表
	GetOfficialAccountList(ctx context.Context, in *GetOfficialAccountListRequest, opts ...grpc.CallOption) (*GetOfficialAccountListReply, error)
}

type officialAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewOfficialAccountClient(cc grpc.ClientConnInterface) OfficialAccountClient {
	return &officialAccountClient{cc}
}

func (c *officialAccountClient) WxCallback(ctx context.Context, in *WxCallbackRequest, opts ...grpc.CallOption) (*WxCallbackReply, error) {
	out := new(WxCallbackReply)
	err := c.cc.Invoke(ctx, OfficialAccount_WxCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) AddOfficialAccount(ctx context.Context, in *AddOfficialAccountRequest, opts ...grpc.CallOption) (*AddOfficialAccountReply, error) {
	out := new(AddOfficialAccountReply)
	err := c.cc.Invoke(ctx, OfficialAccount_AddOfficialAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) UpdateOfficialAccount(ctx context.Context, in *UpdateOfficialAccountRequest, opts ...grpc.CallOption) (*UpdateOfficialAccountReply, error) {
	out := new(UpdateOfficialAccountReply)
	err := c.cc.Invoke(ctx, OfficialAccount_UpdateOfficialAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) DeleteOfficialAccount(ctx context.Context, in *DeleteOfficialAccountRequest, opts ...grpc.CallOption) (*DeleteOfficialAccountReply, error) {
	out := new(DeleteOfficialAccountReply)
	err := c.cc.Invoke(ctx, OfficialAccount_DeleteOfficialAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *officialAccountClient) GetOfficialAccountList(ctx context.Context, in *GetOfficialAccountListRequest, opts ...grpc.CallOption) (*GetOfficialAccountListReply, error) {
	out := new(GetOfficialAccountListReply)
	err := c.cc.Invoke(ctx, OfficialAccount_GetOfficialAccountList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OfficialAccountServer is the server API for OfficialAccount service.
// All implementations must embed UnimplementedOfficialAccountServer
// for forward compatibility
type OfficialAccountServer interface {
	// 微信回调
	WxCallback(context.Context, *WxCallbackRequest) (*WxCallbackReply, error)
	// ------------ internal ----------
	// 添加公众号
	AddOfficialAccount(context.Context, *AddOfficialAccountRequest) (*AddOfficialAccountReply, error)
	// 修改公众号
	UpdateOfficialAccount(context.Context, *UpdateOfficialAccountRequest) (*UpdateOfficialAccountReply, error)
	// 删除公众号
	DeleteOfficialAccount(context.Context, *DeleteOfficialAccountRequest) (*DeleteOfficialAccountReply, error)
	// 获取公众号列表
	GetOfficialAccountList(context.Context, *GetOfficialAccountListRequest) (*GetOfficialAccountListReply, error)
	mustEmbedUnimplementedOfficialAccountServer()
}

// UnimplementedOfficialAccountServer must be embedded to have forward compatible implementations.
type UnimplementedOfficialAccountServer struct {
}

func (UnimplementedOfficialAccountServer) WxCallback(context.Context, *WxCallbackRequest) (*WxCallbackReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxCallback not implemented")
}
func (UnimplementedOfficialAccountServer) AddOfficialAccount(context.Context, *AddOfficialAccountRequest) (*AddOfficialAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOfficialAccount not implemented")
}
func (UnimplementedOfficialAccountServer) UpdateOfficialAccount(context.Context, *UpdateOfficialAccountRequest) (*UpdateOfficialAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfficialAccount not implemented")
}
func (UnimplementedOfficialAccountServer) DeleteOfficialAccount(context.Context, *DeleteOfficialAccountRequest) (*DeleteOfficialAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOfficialAccount not implemented")
}
func (UnimplementedOfficialAccountServer) GetOfficialAccountList(context.Context, *GetOfficialAccountListRequest) (*GetOfficialAccountListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfficialAccountList not implemented")
}
func (UnimplementedOfficialAccountServer) mustEmbedUnimplementedOfficialAccountServer() {}

// UnsafeOfficialAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OfficialAccountServer will
// result in compilation errors.
type UnsafeOfficialAccountServer interface {
	mustEmbedUnimplementedOfficialAccountServer()
}

func RegisterOfficialAccountServer(s grpc.ServiceRegistrar, srv OfficialAccountServer) {
	s.RegisterService(&OfficialAccount_ServiceDesc, srv)
}

func _OfficialAccount_WxCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).WxCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_WxCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).WxCallback(ctx, req.(*WxCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_AddOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).AddOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_AddOfficialAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).AddOfficialAccount(ctx, req.(*AddOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_UpdateOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).UpdateOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_UpdateOfficialAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).UpdateOfficialAccount(ctx, req.(*UpdateOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_DeleteOfficialAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOfficialAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).DeleteOfficialAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_DeleteOfficialAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).DeleteOfficialAccount(ctx, req.(*DeleteOfficialAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OfficialAccount_GetOfficialAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOfficialAccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OfficialAccountServer).GetOfficialAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OfficialAccount_GetOfficialAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OfficialAccountServer).GetOfficialAccountList(ctx, req.(*GetOfficialAccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OfficialAccount_ServiceDesc is the grpc.ServiceDesc for OfficialAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OfficialAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.OfficialAccount",
	HandlerType: (*OfficialAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WxCallback",
			Handler:    _OfficialAccount_WxCallback_Handler,
		},
		{
			MethodName: "AddOfficialAccount",
			Handler:    _OfficialAccount_AddOfficialAccount_Handler,
		},
		{
			MethodName: "UpdateOfficialAccount",
			Handler:    _OfficialAccount_UpdateOfficialAccount_Handler,
		},
		{
			MethodName: "DeleteOfficialAccount",
			Handler:    _OfficialAccount_DeleteOfficialAccount_Handler,
		},
		{
			MethodName: "GetOfficialAccountList",
			Handler:    _OfficialAccount_GetOfficialAccountList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxbase/v1/wx_base.proto",
}

const (
	MiniProgram_GetOpenidByCode_FullMethodName = "/helloworld.v1.MiniProgram/GetOpenidByCode"
	MiniProgram_AddMiniProgram_FullMethodName  = "/helloworld.v1.MiniProgram/AddMiniProgram"
)

// MiniProgramClient is the client API for MiniProgram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniProgramClient interface {
	// -------------- wx --------------
	// 通过code获取openid
	GetOpenidByCode(ctx context.Context, in *GetOpenidByCodeRequest, opts ...grpc.CallOption) (*GetOpenidByCodeReply, error)
	// ------------ internal ----------
	// 添加小程序
	AddMiniProgram(ctx context.Context, in *AddMiniProgramRequest, opts ...grpc.CallOption) (*AddMiniProgramReply, error)
}

type miniProgramClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniProgramClient(cc grpc.ClientConnInterface) MiniProgramClient {
	return &miniProgramClient{cc}
}

func (c *miniProgramClient) GetOpenidByCode(ctx context.Context, in *GetOpenidByCodeRequest, opts ...grpc.CallOption) (*GetOpenidByCodeReply, error) {
	out := new(GetOpenidByCodeReply)
	err := c.cc.Invoke(ctx, MiniProgram_GetOpenidByCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniProgramClient) AddMiniProgram(ctx context.Context, in *AddMiniProgramRequest, opts ...grpc.CallOption) (*AddMiniProgramReply, error) {
	out := new(AddMiniProgramReply)
	err := c.cc.Invoke(ctx, MiniProgram_AddMiniProgram_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiniProgramServer is the server API for MiniProgram service.
// All implementations must embed UnimplementedMiniProgramServer
// for forward compatibility
type MiniProgramServer interface {
	// -------------- wx --------------
	// 通过code获取openid
	GetOpenidByCode(context.Context, *GetOpenidByCodeRequest) (*GetOpenidByCodeReply, error)
	// ------------ internal ----------
	// 添加小程序
	AddMiniProgram(context.Context, *AddMiniProgramRequest) (*AddMiniProgramReply, error)
	mustEmbedUnimplementedMiniProgramServer()
}

// UnimplementedMiniProgramServer must be embedded to have forward compatible implementations.
type UnimplementedMiniProgramServer struct {
}

func (UnimplementedMiniProgramServer) GetOpenidByCode(context.Context, *GetOpenidByCodeRequest) (*GetOpenidByCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenidByCode not implemented")
}
func (UnimplementedMiniProgramServer) AddMiniProgram(context.Context, *AddMiniProgramRequest) (*AddMiniProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMiniProgram not implemented")
}
func (UnimplementedMiniProgramServer) mustEmbedUnimplementedMiniProgramServer() {}

// UnsafeMiniProgramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniProgramServer will
// result in compilation errors.
type UnsafeMiniProgramServer interface {
	mustEmbedUnimplementedMiniProgramServer()
}

func RegisterMiniProgramServer(s grpc.ServiceRegistrar, srv MiniProgramServer) {
	s.RegisterService(&MiniProgram_ServiceDesc, srv)
}

func _MiniProgram_GetOpenidByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenidByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniProgramServer).GetOpenidByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniProgram_GetOpenidByCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniProgramServer).GetOpenidByCode(ctx, req.(*GetOpenidByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniProgram_AddMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniProgramServer).AddMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MiniProgram_AddMiniProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniProgramServer).AddMiniProgram(ctx, req.(*AddMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MiniProgram_ServiceDesc is the grpc.ServiceDesc for MiniProgram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniProgram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.MiniProgram",
	HandlerType: (*MiniProgramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOpenidByCode",
			Handler:    _MiniProgram_GetOpenidByCode_Handler,
		},
		{
			MethodName: "AddMiniProgram",
			Handler:    _MiniProgram_AddMiniProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wxbase/v1/wx_base.proto",
}
